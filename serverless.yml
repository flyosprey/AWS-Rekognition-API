org: flyosprey
app: aws-python-rest-api
service: aws-python-rest-api

frameworkVersion: '2'

custom:
  tableName: Blobs
  s3Sync:
    - bucketName: blobs-bucket

resources:
  Resources:
    ImageStoringBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: blobs-bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: s3:PutObject
              Resource: ["arn:aws:s3:::blobs-bucket", "arn:aws:s3:::blobs-bucket/*"]
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: blobs-bucket
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST]
              AllowedOrigins: ['*']
              Id: CORSRuleId1
              MaxAge: '3600'
    BlobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: blob_id
            AttributeType: S
          - AttributeName: callback_url
            AttributeType: S
        KeySchema:
          - AttributeName: blob_id
            KeyType: HASH
          - AttributeName: callback_url
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: '20201221'
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ BlobsTable, Arn ]

functions:
  create_blob:
    handler: handler.create_blob
    events:
      - http:
          path: /blobs
          method: POST
      - http:
          path: /blobs/{blob_id}
          method: GET
